[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 programets authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/effective_google_analytics.html","id":"core-goals-of-an-open-source-project-website","dir":"Articles","previous_headings":"","what":"Core Goals of an Open Source Project Website","title":"Using google analytics effectively","text":"Increase Awareness & Adoption: Get people know use software. Provide Support: Offer clear documentation help resources. Build Community: Encourage interaction, contributions, feedback. Showcase Project Health & Activity: Demonstrate ongoing development value.","code":""},{"path":"/articles/effective_google_analytics.html","id":"appropriate-ga4-metrics-dimensions","dir":"Articles","previous_headings":"","what":"Appropriate GA4 Metrics & Dimensions","title":"Using google analytics effectively","text":"’s breakdown, categorized goal: Views (filtered documentation pages): often specific documentation sections viewed? Average Engagement Time per Session/Page (filtered): users spending time reading docs, quickly leaving? Event Count (view_search_results): using site’s search docs, often used? (Enhanced Measurement) Scrolls (filtered documentation pages): users scrolling long documentation pages? (Enhanced Measurement) Page Path Screen Class: specific documentation pages viewed. Search Term: users searching site? (Requires setup) Session Source / Medium: users arriving specific channels engage docs? Code Repositories (GitHub, GitLab, etc.) - Custom Event like view_repository recommended. Issue Trackers - Custom Event like view_issues recommended. Community Forums/Chat (Discourse, Slack, Discord) - Custom Event like join_community recommended. Contribution Guides - Can tracked via Views, custom event view_contribution_guide. Conversions (based custom events): Mark key community link clicks conversions. Page Path Screen Class: pages driving clicks community resources? (e.g., “Contribute” page). Outbound Link URL: specific external URL clicked (useful using custom events, though less precise). Session Source / Medium: certain channels bringing potential contributors? Views (filtered Blog/News/Release Notes): often updates read? Average Engagement Time per Session/Page (filtered): users reading content? Users / New Users: Overall site growth indicates project interest. Page Path Screen Class: specific blog posts release notes popular? Session Source / Medium: people finding updates? Engagement Rate: Percentage sessions lasted longer 10 seconds, conversion event, 2+ page views. Indicates quality visits. Average Engagement Time per Session: Overall time users actively engaged. Browser: Technical dimension compatibility checks. Operating System: Technical dimension. Language: User’s browser language.","code":""},{"path":[]},{"path":[]},{"path":"/articles/effective_google_analytics.html","id":"providing-support-documentation","dir":"Articles","previous_headings":"","what":"Providing Support (Documentation)","title":"Using google analytics effectively","text":"Views (filtered documentation pages): often specific documentation sections viewed? Average Engagement Time per Session/Page (filtered): users spending time reading docs, quickly leaving? Event Count (view_search_results): using site’s search docs, often used? (Enhanced Measurement) Scrolls (filtered documentation pages): users scrolling long documentation pages? (Enhanced Measurement) Page Path Screen Class: specific documentation pages viewed. Search Term: users searching site? (Requires setup) Session Source / Medium: users arriving specific channels engage docs?","code":""},{"path":"/articles/effective_google_analytics.html","id":"building-community-contributions","dir":"Articles","previous_headings":"","what":"Building Community & Contributions","title":"Using google analytics effectively","text":"Code Repositories (GitHub, GitLab, etc.) - Custom Event like view_repository recommended. Issue Trackers - Custom Event like view_issues recommended. Community Forums/Chat (Discourse, Slack, Discord) - Custom Event like join_community recommended. Contribution Guides - Can tracked via Views, custom event view_contribution_guide. Conversions (based custom events): Mark key community link clicks conversions. Page Path Screen Class: pages driving clicks community resources? (e.g., “Contribute” page). Outbound Link URL: specific external URL clicked (useful using custom events, though less precise). Session Source / Medium: certain channels bringing potential contributors?","code":""},{"path":"/articles/effective_google_analytics.html","id":"showcasing-project-health-activity","dir":"Articles","previous_headings":"","what":"Showcasing Project Health & Activity","title":"Using google analytics effectively","text":"Views (filtered Blog/News/Release Notes): often updates read? Average Engagement Time per Session/Page (filtered): users reading content? Users / New Users: Overall site growth indicates project interest. Page Path Screen Class: specific blog posts release notes popular? Session Source / Medium: people finding updates?","code":""},{"path":"/articles/effective_google_analytics.html","id":"general-engagement-technical","dir":"Articles","previous_headings":"","what":"General Engagement & Technical","title":"Using google analytics effectively","text":"Engagement Rate: Percentage sessions lasted longer 10 seconds, conversion event, 2+ page views. Indicates quality visits. Average Engagement Time per Session: Overall time users actively engaged. Browser: Technical dimension compatibility checks. Operating System: Technical dimension. Language: User’s browser language.","code":""},{"path":"/articles/effective_google_analytics.html","id":"important-considerations","dir":"Articles","previous_headings":"","what":"Important Considerations","title":"Using google analytics effectively","text":"Custom Events Key: GA4’s automatic tracking good, must set custom events (e.g., via Google Tag Manager) track crucial actions like downloads, clicks GitHub/issue tracker, etc. Mark Conversions: Identify important events (like download, view_repository) mark conversions GA4 interface. makes reporting key goals much easier. Filters & Segments: Use GA4’s “Explore” section heavily. Create reports filtered specific page paths (e.g., /docs/, /blog/) user segments (e.g., users specific countries, users downloaded software).","code":""},{"path":"/articles/effective_google_analytics.html","id":"good-plots-and-tables-for-summarization","dir":"Articles","previous_headings":"","what":"Good Plots and Tables for Summarization","title":"Using google analytics effectively","text":"Table: Sessions, Users, New Users, Engagement Rate, Conversions (Downloads) Session Source / Medium. (Shows effectiveness channels). Time Series Chart: Users New Users time (daily/weekly). (Shows growth trends). Pie Chart: New vs. Returning Users. (Shows audience composition). Geo Map: Users Country. (Shows geographic reach). Table: Top Pages (Page Path Screen Class) Views, Users, Average Engagement Time, Scrolls, Event Count (download key actions initiated page). (Shows popular/effective content). Table: Top Landing Pages (Landing Page + query string) Sessions, Engagement Rate, Conversions (Downloads). (Shows effective entry points). Table (Filtered Blog/News): Pages Views, Average Engagement Time. (Shows blog performance). Time Series Chart: download Event Count time. (Shows download trends). Table: download Event Count (Conversions) Session Source / Medium. (Shows channels drive downloads). Table: download Event Count (Conversions) Landing Page + query string. (Shows entry pages lead downloads). Table: download Event Count (Conversions) Country. Table (Filtered /docs/ path): Top Documentation Pages Views, Average Engagement Time, Scrolls. (Shows used/engaging docs). Table: Search Term Usage Count. (Shows users looking ). Table: Event Count view_repository, view_issues, join_community etc. Session Source / Medium. (Shows channels driving community engagement). Table: Event Count custom events Page Path (Shows pages drive actions, e.g., “Contribute” page effectiveness). (Advanced): Funnel Exploration report showing users moving viewing contribution page -> clicking repository link. Pie Chart: Users Device Category. Table: Users Browser Operating System. (Useful identifying potential compatibility issues specific tech groups low engagement). Remember tailor suggestions specific structure goals open-source project’s website. Regularly review data understand ’s working users might encountering friction.","code":""},{"path":"/articles/googleanalytics.html","id":"what-is-google-analytics","dir":"Articles","previous_headings":"","what":"What is Google Analytics?","title":"Google Analytics","text":"Google Analytics web analytics service offered Google tracks reports website traffic. currently platform Google Marketing Platform brand. Google Analytics widely used web analytics service web. powerful tool provides insights users interact website, allowing make data-driven decisions improve user experience optimize marketing efforts. Google Analytics 4 (GA4) latest version Google Analytics, focuses event-based tracking provides advanced features analyzing user behavior across different platforms.","code":""},{"path":"/articles/googleanalytics.html","id":"the-googleanalyticsr-package","dir":"Articles","previous_headings":"","what":"The googleAnalyticsR package","title":"Google Analytics","text":"googleAnalyticsR package R client Google Analytics API. allows access analyze Google Analytics data directly R, making easier integrate web analytics data analysis workflow. package provides functions authenticate Google account, retrieve data Google Analytics, perform various analyses data.","code":"# library(programets)"},{"path":"/articles/googleanalytics.html","id":"getting-started-with-googleanalyticsr","dir":"Articles","previous_headings":"","what":"Getting started with googleAnalyticsR","title":"Google Analytics","text":"resulting res object contain data specified date range, metrics, dimensions. can view first rows data using head() function.","code":"## setup library(googleAnalyticsR)  ## authenticate ga_auth(email = \"seandavi@gmail.com\") #> ℹ 2025-04-07 18:55:00.343781 > Default Google Project for googleAnalyticsR is set.        This is shared with all googleAnalyticsR users. If making a lot of API calls, please visit:        https://code.markedmondson.me/googleAnalyticsR/articles/setup.html#professional-mode-your-own-google-project       for instructions on setting your own Google Project #> ℹ 2025-04-07 18:55:00.353555 > Setting client.id from options(googleAuthR.client_id)  ## get your accounts account_list <- ga_account_list(\"ga4\")  ## account_list will have a column called \"viewId\" account_list$viewId #> Warning: Unknown or uninitialised column: `viewId`. #> NULL  ## View account_list and pick the viewId you want to extract data from ga_id <- 347971380 library(googleAnalyticsR) library(lubridate) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union  start_date <- Sys.Date() - 365 end_date <- Sys.Date() - 1  cat(\"Fetching daily data by New/Returning and Country...\\n\") #> Fetching daily data by New/Returning and Country...  tryCatch(     {         daily_user_country_data <- ga_data(             propertyId = ga_id,             dimensions = c(\"date\", \"newVsReturning\", \"country\"), # Added dimensions             metrics = c(\"activeUsers\", \"sessions\"), # Example metrics             date_range = c(start_date, end_date),             limit = -1         )          cat(\"Successfully fetched\", nrow(daily_user_country_data), \"rows.\\n\")         print(head(daily_user_country_data))     },     error = function(e) {         cat(\"Error fetching data:\\n\")         print(e)     } ) #> ℹ 2025-04-07 18:55:00.977227 > Downloaded [ 408 ] of total [ 408 ] rows #> Successfully fetched 408 rows. #> # A tibble: 6 × 5 #>   date       newVsReturning country       activeUsers sessions #>   <date>     <chr>          <chr>               <dbl>    <dbl> #> 1 2024-07-15 new            United States         103      103 #> 2 2024-07-16 returning      United States          61      219 #> 3 2024-07-17 returning      United States          56      134 #> 4 2024-07-15 returning      United States          53       78 #> 5 2024-10-02 new            United States          38       38 #> 6 2024-07-16 new            United States          30       30 library(ggplot2) library(zoo) #>  #> Attaching package: 'zoo' #> The following objects are masked from 'package:base': #>  #>     as.Date, as.Date.numeric library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # Group by user type and country, then calculate rolling average moving_avg_data <- daily_user_country_data %>%     arrange(date) %>%     group_by(newVsReturning, country) %>%     mutate(         activeUsers_7day_avg = rollmean(activeUsers, k = 7, fill = NA, align = \"right\"),         sessions_7day_avg = rollmean(sessions, k = 7, fill = NA, align = \"right\")     ) %>%     ungroup()  # Let's see the results head(moving_avg_data) #> # A tibble: 6 × 7 #>   date       newVsReturning country    activeUsers sessions activeUsers_7day_avg #>   <date>     <chr>          <chr>            <dbl>    <dbl>                <dbl> #> 1 2024-04-07 new            United St…           2        2                   NA #> 2 2024-04-07 (not set)      United St…           0        2                   NA #> 3 2024-04-08 new            United St…           1        1                   NA #> 4 2024-04-09 new            United St…           3        3                   NA #> 5 2024-04-09 (not set)      United St…           0        2                   NA #> 6 2024-04-10 new            United St…           6        6                   NA #> # ℹ 1 more variable: sessions_7day_avg <dbl>  # Plot the moving average for active users moving_avg_data %>%     group_by(date, newVsReturning) %>%     summarise(activeUsers_7day_avg = sum(activeUsers_7day_avg, na.rm = TRUE)) %>%     ggplot(aes(x = date, y = activeUsers_7day_avg, color = newVsReturning)) +     geom_line() +     labs(         title = \"7-Day Moving Average of Active Users\",         x = \"Date\",         y = \"Active Users (7-day avg)\"     ) +     theme_minimal() #> `summarise()` has grouped output by 'date'. You can override using the #> `.groups` argument."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean Davis. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davis S (2025). programets: Collect analyze academic impact metrics various sources. R package version 0.0.0.9000.","code":"@Manual{,   title = {programets: Collect and analyze academic impact metrics from various sources},   author = {Sean Davis},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"/reference/google_analytics_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Get google analytics data as a dataframe — google_analytics_dataframe","title":"Get google analytics data as a dataframe — google_analytics_dataframe","text":"function retrieves Google Analytics data returns dataframe.","code":""},{"path":"/reference/google_analytics_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get google analytics data as a dataframe — google_analytics_dataframe","text":"","code":"google_analytics_dataframe(   property_id,   start_date,   end_date,   metrics,   dimensions,   filters = NULL,   sort = NULL )"},{"path":"/reference/google_analytics_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get google analytics data as a dataframe — google_analytics_dataframe","text":"property_id Google Analytics property ID (e.g., \"UA-12345678-1\"). start_date start date data retrieval (e.g., \"2023-01-01\"). end_date end date data retrieval (e.g., \"2023-01-31\"). metrics metrics retrieve (e.g., \"ga:sessions,ga:pageviews\"). dimensions dimensions retrieve (e.g., \"ga:date,ga:source\"). filters Optional filters apply data (e.g., \"ga:country==United States\"). sort Optional sorting data (e.g., \"-ga:sessions\").","code":""},{"path":"/reference/google_analytics_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get google analytics data as a dataframe — google_analytics_dataframe","text":"dataframe containing Google Analytics data.","code":""}]
